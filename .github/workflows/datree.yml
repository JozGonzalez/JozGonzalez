# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

# A sample workflow which checks out your code and scans your desired k8s config files for misconfigurations using the Datree CLI.
# The results are then uploaded to GitHub Security Code Scanning.
#
# For more information and configurations options, see https://github.com/datreeio/action-datree/

name: Datree

on:
  push:
    branches: [ "main" ]
  pull_request:
    # The branches below must be a subset of the branches above
    branches: [ "main" ]

permissions:
  contents: read

jobs:
  datree:
    permissions:
      contents: read # for actions/checkout to fetch code
      security-events: write # for github/codeql-action/upload-sarif to upload SARIF results
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Run Datree policy check
        continue-on-error: true
        uses: datreeio/action-datree@de67ae7a5133d719dc794e1b75682cd4c5f94d8a
        env:
          # In order to use the Datree action you will need to have a Datree token.
          # See https://hub.datree.io/setup/account-token#1-get-your-account-token-from-the-dashboard to acquire your token.
          DATREE_TOKEN: ${{ secrets.DATREE_TOKEN }}
        with:
          # Add the path to the configuration file/s that you would like to test.
          # See https://github.com/datreeio/action-datree#usage for all available options.
          path: test-file.yaml
          # Setting a SARIF output will generate a file named "datree.sarif" containing your test results
          cliArguments: "-o sarif"
      - name: Upload result to GitHub Code Scanning
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file : datree.sarif
- nombre: configuración del entorno Node.js

  usos: acciones/setup-node@v2.5.2

  con:

    # Establecer autenticación siempre en npmrc

    always-auth: # opcional, el valor predeterminado es falso

    # Versión Especificación de la versión a usar. Ejemplos: 12.x, 10.15.1, >=10.15.0

    versión-nodo: # opcional

    # Archivo que contiene la versión Spec de la versión a usar. Ejemplos: .nvmrc, .node-version

    archivo-versión-nodo: # opcional

    # Arquitectura de destino para el uso de Node. Ejemplos: x86, x64. Utilizará la arquitectura del sistema de forma predeterminada.

    arquitectura: # opcional

    # Establezca esta opción si desea que la acción busque la última versión disponible que cumpla con las especificaciones de la versión

    comprobar-último: # opcional

    # Registro opcional para configurar la autenticación. Establecerá el registro en un archivo de nivel de proyecto .npmrc y .yarnrc, y configurará la autenticación para leer desde env.NODE_AUTH_TOKEN

    registro-url: # opcional

    # Ámbito opcional para autenticar contra registros de ámbito

    alcance: # opcional

    # Se usa para extraer distribuciones de nodos de versiones de nodos. Dado que existe un valor predeterminado, normalmente el usuario no lo proporciona.

    token: # opcional, el valor predeterminado es ${{ github.token }}

    # Se usa para especificar un administrador de paquetes para el almacenamiento en caché en el directorio predeterminado. Valores admitidos: npm, yarn, pnpm

    caché: # opcional

    # Se usa para especificar la ruta a un archivo de dependencia: package-lock.json, yarn.lock, etc. Admite comodines o una lista de nombres de archivo para almacenar en caché múltiples dependencias.

    ruta-dependencia-caché: # opcional

    # Obsoleto. Utilice la versión de nodo en su lugar. No será compatible después del 1 de octubre de 2019

    versión: # opcional
